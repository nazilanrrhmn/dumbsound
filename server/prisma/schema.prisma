// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  NOT_ACTIVE
}

enum StatusPay {
  APPROVE
  PENDING
  CANCEL
}

// Models
model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  username  String
  password  String
  role      Role        @default(USER)
  createdAt DateTime    @default(now())

  profile   Profile?    // One-to-one relationship with Profile
  transactions Transaction[]
}

model Profile {
  id       Int      @id @default(autoincrement())
  fullname String?  
  avatar   String?  
  phone String?
  address String?  
  gender   Gender?

  userId   Int      @unique // Add @unique to enforce one-to-one relationship
  user     User     @relation(fields: [userId], references: [id])
}

model Music {
  id         Int      @id @default(autoincrement())
  title      String
  year Int
  fileUrl    String
  thumbnails String
  createdAt  DateTime @default(now())
  artistId   Int

  artist     Artist   @relation(fields: [artistId], references: [id])
}

enum typeArtist {
  SOLO
  DUO
  GROUP
}

model Artist {
  id          Int      @id @default(autoincrement())
  name        String
  age String
  type typeArtist
  bio String

  music       Music[]
}

model Transaction {
  id             Int         @id @default(autoincrement())
  userId         Int
  proofUrl       String
  remainingActive DateTime?   // Last active timestamp, nullable
  userStatus     UserStatus  @default(ACTIVE) // Default to ACTIVE
  paymentStatus  StatusPay   @default(PENDING) // Default to PENDING
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt // Automatically updated on each modification

  user           User        @relation(fields: [userId], references: [id])
}